# Explanatory file for Planck likelihood. The bounds are
# 4*sigma range of parameters (wrt Planck18)

# Usage:
#   python emu_like.py sample planck_sample.yaml -v

# Output folder (str)
output: output/planck/sample

# Number of samples to generate (int)
n_samples: 100

# Name of the function to be sampled. It has to be one of the functions
# defined in src/emu_like/sampling_functions.py. All of them should have
# the same structure:
#   - input: array of x sample, list of varying parameters, params dict
#   - output: corresponding y value(s)
# Current options: linear_1d, quadratic_1d, gaussian_1d, linear_2d,
# quadratic_2d, cobaya_loglike.
# With cobaya_loglike one can choose any Cobaya likelihood, adding
# params, likelihood, prior (optional) and theory (optional)
# blocks following the Cobaya scheme.
sampled_function: cobaya_loglike

# Spacing method (str).
# Options: evaluate, grid, log_grid, random_uniform, random_normal,
# latin_hypercube. In evaluate mode, it will evaluate the pipeline at a
# single point specified by the value of ref for each parameter
# (otherwise ref is ignored).
spacing: latin_hypercube

# List of params.
# If the function to sample is cobaya_loglike all this, plus the additional
# blocks needed by cobaya should be encapsulated by a "cobaya" block.
cobaya:

  theory:
    classy:
      extra_args:
        non_linear: hmcode
        N_ur: 2.0308
        N_ncdm: 1
        m_ncdm: 0.06

  likelihood:
    planck_2018_lowl.TT: null
    planck_2018_lowl.EE: null
    planck_2018_highl_plik.TTTEEE_lite: null
    planck_2018_lensing.clik: null

  params:
    # If spacing grid, log_grid, random_normal or latin_hypercube use (min, max)
    # If spacing random_uniform use (loc, scale), with loc=mean and scale=sigma.
    logA: # sampled parameter
      prior:
        min: 2.988
        max: 3.1
      ref: 3.0297862
      latex: \log(10^{10} A_\mathrm{s})
      drop: true
    A_s: # internal Class parameter
      value: 'lambda logA: 1e-10*np.exp(logA)'
      latex: A_\mathrm{s}
      derived: false
    n_s:
      prior:
        min: 0.9481
        max: 0.9817
      ref: 0.97084247
      latex: n_\mathrm{s}
    theta_s_1e2:
      prior:
        min: 1.03968
        max: 1.04216
      ref: 1.0410781
      latex: 100\theta_\mathrm{MC}
      drop: true
    100*theta_s:
      value: 'lambda theta_s_1e2: theta_s_1e2'
      derived: false
    omega_b:
      prior:
        min: 0.02177
        max: 0.02297
      ref: 0.022438922
      latex: \Omega_\mathrm{b} h^2
    omega_cdm:
      prior:
        min: 0.1152
        max: 0.1248
      ref: 0.11825479
      latex: \Omega_\mathrm{c} h^2
    tau_reio:
      prior:
        min: 0.0252
        max: 0.0836
      ref: 0.053234614
      latex: \tau_\mathrm{reio}
    A_planck:
      prior:
        min: 0.990839
        max: 1.0104
      ref: 1.0020416
