# Explanatory file.
# Usage:
#   python main.py sample path/to/yaml/file.yaml -v

# Output folder (str)
output: output/spectra/sample

# Number of samples to generate (int)
n_samples: 10

# Name of the function to be sampled. It has to be one of the functions
# defined in src/emu_like/sampling_functions.py. All of them should have
# the same structure:
#   - input: array of x sample, list of varying parameters, params dict
#   - output: corresponding y value(s)
# Current options: linear_1d, quadratic_1d, gaussian_1d, linear_2d,
# quadratic_2d, cobaya_loglike, class_spectra.
# - With cobaya_loglike one can choose any Cobaya likelihood, adding
# params, likelihood, prior (optional) and theory (optional)
# blocks following the Cobaya scheme.
# - TODO: Comment class_spectra 
sampled_function: class_spectra

# Spacing method (str).
# Options: evaluate, grid, log_grid, random_uniform, random_normal,
# latin_hypercube. In evaluate mode, it will evaluate the pipeline at a
# single point specified by the value of ref for each parameter
# (otherwise ref is ignored).
spacing: latin_hypercube
# If the spacicing is latin_hypercube, you can choose a seed to ensure
# deterministic results.
seed: 12

output:

spectra:
  pk_m:
    k_min: 1.e-4
    k_max: 1.
    k_space: 'log'
    k_num: 600
  pk_cb:
    k_min: 1.e-4
    k_max: 1.
    k_space: 'log'
    k_num: 600
  pk_weyl:
    k_min: 1.e-4
    k_max: 1.
    k_space: 'log'
    k_num: 600
  cl_TT:
    ell_max: 2500
  cl_EE:
    ell_max: 2500
  cl_TE:
    ell_max: 2500
  cl_pp:
    ell_max: 2500
  cl_Tp:
    ell_max: 2500
  cl_Ep:
    ell_max: 2500
  cl_TT_lensed:
    ell_max: 2500
  cl_EE_lensed:
    ell_max: 2500
  cl_TE_lensed:
    ell_max: 2500
  cl_pp_lensed:
    ell_max: 2500
  cl_Tp_lensed:
    ell_max: 2500
  cl_Ep_lensed:
    ell_max: 2500

# List of params.
# If the function to sample is cobaya_loglike all this, plus the additional
# blocks needed by cobaya should be encapsulated by a "cobaya" block.
# - TODO: Comment class_spectra 
class:

  params:
    # If spacing grid, log_grid, random_normal or latin_hypercube use (min, max)
    # If spacing random_uniform use (loc, scale), with loc=mean and scale=sigma.
    z_pk:
      prior:
        min: 0.
        max: 5.
    h:
      prior:
        min: 0.5
        max: 0.9

  extra_args:
    # N_ur: 2.0308
    # N_ncdm: 1
    # m_ncdm: 0.06
