# Explanatory file.
# Usage:
#   python main.py sample spectra_sample.yaml -v

output:
  # Output folder (str)
  path: output/spectra/sample
  # Save incrementally or at the end (bool)
  # If True use num_processes: 1
  save_incrementally: True
  # Number of processes to sample in parallel (int)
  # If > 1 use save_incrementally: False
  num_processes: 1


# Sampling method for x.
# Options:
# - evaluate: evaluate the pipeline at a single point. It uses
#   the 'params:ref' key (otherwise this key is useless).
# - grid: uniform grid in the range ['params:min', 'params:max'];
# - log_grid: log grid in the range ['params:min', 'params:max'];
# - random_uniform: random uniform distribution in the range
#   ['params:min', 'params:max'];
# - random_normal: random normal distribution with mean 'params:loc'
#   and standard deviation 'params:scale';
# - latin_hypercube: random latin hypercube distribution. It is
#   possible to choose a seed to have deterministic results (see below);
# For a list of all available options look at src/emu_like/x_samplers.py.
x_sampler:
  # Name of the sampling (str).
  name: latin_hypercube
  # Arguments
  args:
    # Number of samples (int). Used in all but evaluate
    n_samples: 2
    # Seed (int). Used only in latin_hypercube to ensure
    # deterministic sampling
    seed: 12


# Function used to get y=f(x).
# Options:
# - linear_1d: y = a*x + b;
# - quadratic_1d: y = a*x^2 + b*x + c;
# - gaussian_1d: y = exp(-(x-mean^2)/std/2);
# - linear_2d: y = a*x1 + b*x2 + c
# - quadratic_2d: y = a*x1^2 + b*x2^2 + c*x1*x2 + d*x1 + e*x2 + f
# - cobaya_loglike: sample cobaya likelihoods
# - class_spectra: sample spectra generated by Class
# For a list of all available options look at src/emu_like/y_models.py.
y_model:
  # Name of the y_model (str).
  name: class_spectra
  # Arguments
  args:
    Omega_m: 0.3158
    Omega_b: 0.0494
    A_s: 2.1006e-9
    n_s: 0.96605
    tau_reio: 0.0543
    N_ur: 2.0308
    N_ncdm: 1
    m_ncdm: 0.06
    YHe: 0.24
    # Precision parameters (this should be a good compromise, check for more general models)
    k_per_decade_for_pk: 200
    k_per_decade_for_bao: 400
    l_logstep: 1.026
    l_linstep: 25
    perturbations_sampling_stepsize: 0.01
    l_switch_limber: 20
    accurate_lensing: 1
    delta_l_max: 1000
    k_max_tau0_over_l_max: 8

  # List of output files (only for class_spectra)
  outputs:
    # Each spectrum is saved in a different file
    pk_m:
      k_min: 1.e-4
      k_max: 12.
      k_space: 'log'
      k_num: 600
      ratio: True
    pk_cb:
      k_min: 1.e-4
      k_max: 12.
      k_space: 'log'
      k_num: 600
      ratio: True
    pk_weyl:
      k_min: 1.e-4
      k_max: 12.
      k_space: 'log'
      k_num: 600
      ratio: True
    f_m:
      k_min: 1.e-4
      k_max: 12.
      k_space: 'log'
      k_num: 600
    f_cb:
      k_min: 1.e-4
      k_max: 12.
      k_space: 'log'
      k_num: 600
    f_weyl:
      k_min: 1.e-4
      k_max: 12.
      k_space: 'log'
      k_num: 600
    cl_TT:
      ell_min: 2
      ell_max: 5000
      ratio: True
    cl_EE:
      ell_min: 2
      ell_max: 5000
      ratio: True
    cl_TE:
      ell_min: 2
      ell_max: 5000
    cl_BB:
      ell_min: 2
      ell_max: 5000
    cl_pp:
      ell_min: 2
      ell_max: 5000
      ratio: True
    cl_Tp:
      ell_min: 2
      ell_max: 5000
    cl_TT_lensed:
      ell_min: 2
      ell_max: 5000
      ratio: True
    cl_EE_lensed:
      ell_min: 2
      ell_max: 5000
      ratio: True
    cl_TE_lensed:
      ell_min: 2
      ell_max: 5000
    cl_BB_lensed:
      ell_min: 2
      ell_max: 5000


# List of parameters.
params:
  # Samplers:
  # - evaluate: use 'params:ref'
  # - random_normal: use 'params:prior:loc' (mean), 'params:prior:scale' (std)
  # - all the others: use 'params:prior:min', 'params:prior:max'
  # Train generators:
  # - cobaya_loglike: write here parameters as in the cobaya 'params' block
  # - all the others: write here only the parameters that are varying
  #   (the fixed ones should go in 'train_generator:args')
  z_pk:
    prior:
      min: 0.
      max: 5.
  h:
    prior:
      min: 0.5
      max: 0.9
